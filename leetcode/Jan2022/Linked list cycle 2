class Solution:
    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if not head:
            return None
        fast,slow=head,head
        while fast:
            fast=fast.next
            slow=slow.next
            if not fast:
                return None
            fast=fast.next
            if fast==slow:
                fast=head
                break
        else:
            return None
        while fast!=slow:
            
            fast=fast.next
            slow=slow.next
            
        return fast
        
        #proof
        a=distance from start to loop start 
        b=distance from loop start to intersection
        c=distance from intersection to loop start
        
        Since fast is 2X of slow
        total distance fast=2(total distance slow)
        
        slow=a+b
        fast=a+b+c+b
        Therefore,
        a+2b+c=2(a+b)
        c=a
