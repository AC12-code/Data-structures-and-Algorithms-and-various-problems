class Solution:
    def superpalindromesInRange(self, left: str, right: str) -> int:
        res = [1,2,3,4,5,6,7,8,9] # initial
        for i in range(1,10000): # we only need at most four digits to consturct nine digits
            s1 = str(i) + str(i)[::-1]
            res.append(s1)
            for j in range(10):
                s2 = str(i) + str(j) + str(i)[::-1]
                res.append(s2)
        strs = ""
        count = 0
        res=list(map(int,res))
        res.sort()       
        for i in res:            
            strs = str(i**2)
            if strs == strs[::-1] and int(left) <= int(strs) <= int(right):
                count += 1
            if int(strs) > int(right):
                break
        return count


# reference explaination...


we can construct in two steps:

Get all palindrome number < 10^9 in res(because the input < 10^18)
Traverse each number in res,determin whether the square is a palindrome
The first question is how to approach the first step, apparently we cannot traverse all number because 10^9 is too large. The key is 'construct it' instead of 'judge it one by one'.

Every palindrome number can be divided into 3 part, I call it left part, middle part and right part. For instance, 12121 can be divided into '12', '1', '21', corresponding left part, middle part, right part. As for 123321, it can be divided into '123', '', '321'.

For each single number x, we can construct 11 palindrome number, which are xx,x0x,x1x,..,x9x, and that is what we need.

res = [1,2,3,4,5,6,7,8,9] # initial
for i in range(1,10000): # we only need at most four digits to consturct nine digits
    s1 = str(i) + str(i)[::-1]
    res.append(s1)
    for j in range(10):
        s2 = str(i) + str(j) + str(i)[::-1]
        res.append(s2)
so, the total number in res is 11*10000 + 9. Apparently we can easily implement the second step by traversing the res!

def isPalin(s):
    return s == s[::-1]

res = list(map(int, res))
res.sort()
ans = []
for val in res:
    s = str(val**2)
    if isPalin(s):
        ans.append(int(s))
print(ans)
