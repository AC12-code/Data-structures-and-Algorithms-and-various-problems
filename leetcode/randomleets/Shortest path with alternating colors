class Solution:
    def shortestAlternatingPaths(self, n: int, redEdges: List[List[int]], blueEdges: List[List[int]]) -> List[int]:
        adj_list=defaultdict(list)
        for i,j in redEdges:
            adj_list[i].append((j,0))
        for c,d in blueEdges:
            adj_list[c].append((d,1))
        answer=[-1]*n
        answer[0]=0
        visited=[[False,False] for i in range(n)] 
        visited[0][0]=visited[0][1]=True
        q=deque()
        q.append((0,0,-1))
        while q:
            node,step,colour=q.popleft()
            if node not in adj_list:continue
            for nei in adj_list[node]:
                n,c=nei[0],nei[1]
                if visited[n][c]!=True and colour!=c:
                    if answer[n]== -1:
                        answer[n]=step+1
                    visited[n][c]=True
                    q.append((n,step+1,c))

        return answer
    
#ref-https://www.youtube.com/watch?v=ZwlcA4u_uyA&t=11s  
            
        
