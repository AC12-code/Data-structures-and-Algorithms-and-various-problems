# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def findDuplicateSubtrees(self, root: Optional[TreeNode]) -> List[Optional[TreeNode]]:
        
        dis=defaultdict(int)
        res=[]
        def dfs(root):
    
            if root:
                encoding=str(root.val)+"#"+dfs(root.left)+"#"+dfs(root.right)
                dis[encoding]+=1
                if dis[encoding]==2:res.append(root)
                return encoding
            return ''   

        dfs(root)
        return res
