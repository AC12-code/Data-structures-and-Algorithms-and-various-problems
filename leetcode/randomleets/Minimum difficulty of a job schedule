class Solution:
    def minDifficulty(self, A: List[int], d: int) -> int:
      
        # def dfs(jobs, d):
        #     if d == 1:
        #         return max(jobs)
        #     minDiff = float("inf")
        #     for i in range(1, len(jobs)):
        #         curr = max(jobs[:i]) + dfs(jobs[i:], d - 1)
        #         minDiff = min(minDiff, curr)
        #     return minDiff
        # if len(A)<d:return -1
        # return dfs(A, d)
    
        n = len(A)
        if n < d: return -1

        @lru_cache(None)
        def dfs(i, d):
            if d == 1:
                return max(A[i:])
            res, maxd = float('inf'), 0
            for j in range(i, n - d + 1):
                maxd = max(maxd, A[j])
                res = min(res, maxd + dfs(j + 1, d - 1))
            return res

        return dfs(0, d)
