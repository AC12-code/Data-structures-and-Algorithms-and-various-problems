class Solution:
    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:
        if not grid or not grid[0] or grid[0][0] == 1 or grid[-1][-1] == 1: return -1
        visited=set((0,0))
        que=[(0,0,1)]
        n=len(grid)
        directions=[(1,0),(0,1),(1,-1),(-1,1),(-1,0),(0,-1),(1,1),(-1,-1)]
        while que:
            r,c,lev=que.pop(0)
            if r==n-1 and c==n-1:
                return lev
        
   
            for i,j in directions:
                if r+i>=0 and r+i<=n-1 and c+j>=0 and c+j<=n-1 and grid[r+i][c+j]==0 and (r+i,c+j) not in visited:
                    visited.add((r+i,c+j))
                    que.append((r+i,c+j,lev+1))


        return -1 
