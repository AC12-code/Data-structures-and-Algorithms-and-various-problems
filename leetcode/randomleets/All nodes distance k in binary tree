# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def distanceK(self, root: TreeNode, target: TreeNode, k: int) -> List[int]:
        def buildGraph(node, parent, graph):
            if not node:
                return
            
            if node not in graph:
                graph[node] = []
                
            if parent:
                graph[node].append(parent)
                graph[parent].append(node)
                
            buildGraph(node.left, node, graph)
            buildGraph(node.right, node, graph)

        graph={}
        buildGraph(root,None,graph)
        queue=[(target,0)]
        visited=set([target])
        result=[]
        while queue:
            n,dist=queue.pop(0)
            if dist==k:
                result.append(n.val)
            if dist>k:break
            for neigh in graph[n]:
                if neigh not in visited:
                    visited.add(neigh)
                    queue.append((neigh,dist+1))
        return result
       
