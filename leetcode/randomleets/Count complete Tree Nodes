# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def countNodes(self, root: Optional[TreeNode]) -> int:
#         if not root:
#             return 0
#         lis=[root]
#         new_lis=[]
#         count=1
#         while lis:
#             for i in lis:
#                 if i.left:
#                     new_lis.append(i.left)
#                     count+=1
#                 if i.right:
#                     new_lis.append(i.right)
#                     count+=1
#             lis=new_lis
#             new_lis=[]
            
#         return count


        leftdepth = self.getdepth(root, True)
        rightdepth = self.getdepth(root, False)

        if leftdepth == rightdepth:
            return 2 ** leftdepth - 1
        else:
            return 1 + self.countNodes(root.left) + self.countNodes(root.right)

    def getdepth(self, root, isLeft):
        if root is None:
            return 0
        if isLeft:
            return 1 + self.getdepth(root.left, isLeft)
        else:
            return 1 + self.getdepth(root.right, isLeft)    
        
