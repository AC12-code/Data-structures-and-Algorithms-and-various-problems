# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if not head:return
        s,f,cycle=head,head,0
        while f and f.next:
            if not f:return 
            s=s.next
            f=f.next.next
            if s==f:
                cycle=1
                break
        if not cycle:return
        while head!=s:
            head=head.next
            s=s.next
        return head
        
        #proof
        a=distance from start to loop start 
        b=distance from loop start to intersection
        c=distance from intersection to loop start

        Since fast is 2X of slow
        total distance fast=2(total distance slow)

        slow=a+b
        fast=a+b+c+b
        Therefore,
        a+2b+c=2(a+b)
        c=a
0 comments on commit 052c516
