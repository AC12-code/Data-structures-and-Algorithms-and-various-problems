# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        # if not root: return
        # res=[]
        # lis=[root]
        # while lis:
        #     for i in lis:
        #         if i.left:
        #             if i.left.val<i.val:
        #                 res.append(i.left)
        #             else:
        #                 return False
        #         if i.right:
        #             if i.right.val>i.val:
        #                 res.append(i.right)
        #             else:
        #                 return False
        #     lis=res
        #     res=[]
        # return True
        # def isValidBST(self, root):
        def inOrder(root, output):
            if root is None:
                return

            inOrder(root.left, output)
            output.append(root.val)
            inOrder(root.right, output)
            
        output = []
        inOrder(root, output)

        for i in range(1, len(output)):
            if output[i-1] >= output[i]:
                return False

        return True

        
