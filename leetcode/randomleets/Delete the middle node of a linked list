# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def deleteMiddle(self, head: Optional[ListNode]) -> Optional[ListNode]:
	
	#1.Two pointers fast&slow solution:
	
	    if not head.next:
            return 
        slow,fast=head,head.next.next
        while fast and fast.next:
            slow=slow.next
            fast=fast.next.next
        slow.next=slow.next.next
        return head
		
		
	#2. Not a two pointer solution:
	
	    temp=head
        length=0
        while temp:
            length+=1
            temp=temp.next  
        if length==1:
            return 
        mid=length//2
        temp=head
        track=1
        while temp:
            if track==mid:
                temp.next=temp.next.next
            temp=temp.next
            track+=1
        return head
