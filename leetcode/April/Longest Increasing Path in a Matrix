class Solution:
    def longestIncreasingPath(self,matrix):
        m, n = len(matrix), len(matrix[0])
        neibs = [(0, -1), (0, 1), (1, 0), (-1, 0)]
        @lru_cache(None)
        def dfs(x, y):
            ans=0
            for dx, dy in neibs:
                if 0 <= x + dx < m and 0 <= y + dy < n and matrix[x + dx][y + dy] < matrix[x][y]:
                    ans=max(ans,dfs(x+dx,y+dy))
            return ans+1

        return max(dfs(i,j) for i, j in product(range(m), range(n)))
        
        
        
        
        #another way
 class Solution:
    def longestIncreasingPath(self, M: List[List[int]]) -> int:
        ylen, xlen = len(M), len(M[0])
        @lru_cache(maxsize=None)
        def dfs(y, x):
            val = M[y][x]
            return 1 + max(
                dfs(y+1,x) if y < ylen - 1 and val > M[y+1][x] else 0,
                dfs(y-1,x) if y > 0 and val > M[y-1][x] else 0, 
                dfs(y,x+1) if x < xlen - 1 and val > M[y][x+1] else 0,
                dfs(y,x-1) if x > 0 and val > M[y][x-1] else 0)
        return max(dfs(y, x) for y in range(ylen) for x in range(xlen))
        
        
        #ref video-https://www.youtube.com/watch?v=uLjO2LUlLN4
