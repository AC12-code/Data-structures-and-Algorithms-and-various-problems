def sortedInsert(head, data):
    '''
    head:  head of given sorted circular linked list
    data:  data to be inserted
    
    return: head of resultant circular linked list
    '''
    temp = head
    new = Node(data)
    
    
    if temp is None:
        new = new.next
        return new
    if data < temp.data:
        # temp = new
        # new.next = temp
        while temp.next!=head:
            temp = temp.next
        new.next = head
        temp.next = new
              
        return new
               
    else:    
        while data>=temp.next.data:
            # if data > temp.next.data:
            temp = temp.next
        new.next = temp.next
        temp.next = new
        
        return head
    
    
        
        

    


#{ 
#  Driver Code Starts
#contributed by RavinderSinghPB
class Node: 
    # Constructor to initialize the node object 
    def __init__(self, data): 
        self.data = data 
        self.next = None
  
class LinkedList: 
  
    # Function to initialize head 
    def __init__(self): 
        self.head = None
        self.last=None
  
    # Function to insert a new node  
    def push(self, data):
        if not self.head:
            nn=Node(data)
            self.head=nn
            self.last=nn
            nn.next=nn
            return
        nn=Node(data)
        nn.next=self.head
        self.last.next=nn
        self.last=nn 
  

# Utility function to print the linked LinkedList

def printList(head):
    if not head:
        return
    temp = head 
    print (temp.data,end=' ') 
    temp = temp.next
    while(temp != head): 
        print (temp.data,end=' ') 
        temp = temp.next
  
    
if __name__ =='__main__':
    t=int(input())
    for tcs in range(t):
        n=int(input())
        arr=[int(x) for x in input().split()]
        data=int(input())

        cll=LinkedList()
        for e in arr:
            cll.push(e)
            
        reshead=sortedInsert(cll.head,data)
        printList(reshead)
        print()
        


# } Driver Code Ends
